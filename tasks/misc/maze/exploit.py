import json
from os import system
from time import time
from termcolor import colored

from websocket import create_connection
from pyfiglet import Figlet
font = Figlet(font="slant")

url = "wss://maze.web1.nto.sprush.rocks/ws"
ws = create_connection(url)

ret = {"left": "right", "right": "left", "up": "down", "down": "up", "": ""}
x = time()

#step by step maze
a = 100 * 2 + 2
b = 100 * 2 + 2
m = [["." for i in range(a)] for j in range(b)]

def print_maze(pos):
   system("clear")
   for i in m:
       print("".join(i))
   print(font.renderText(f"Cur: {pos}"))
   print(font.renderText(f"End: {end}"))


def update_maze(pos, flag, col="red"):
    x, y = pos
    if flag:
       m[x][y] = colored("#", col)
       return
    m[x][y] = "#"

def solve_maze(ws, last_move="", last_pos=[]):
    recv = ws.recv()
    recv = json.loads(recv)
    pos, end, possible_moves, status = (
        recv["position"],
        recv["end"],
        recv["possible_moves"],
        recv["status"],
    )
    update_maze(pos, True)
    print_maze(pos)
    #    total.add(tuple(pos))

    if pos == end:
        print(status)
        y = time()
        print(y - x)
        return True

    for i in possible_moves:
        if i == last_move:
            continue

        ws.send(i)
        ans = solve_maze(ws, ret[i], possible_moves)

        if ans:
            return True

    ws.send(last_move)
    ws.recv()
    update_maze(pos, False)
    return False


recv = ws.recv()
recv = json.loads(recv)
pos, end, possible_moves, status = (
    recv["position"],
    recv["end"],
    recv["possible_moves"],
    recv["status"],
)

ws.send(possible_moves[0])
beg = pos
update_maze(beg, True, "green")
update_maze(end, True, "green")

# total = set()
solve_maze(ws)

# a, b = max([x[0] for x in total]), max([x[1] for x in total])
# m = [["." for i in range(a + 1)] for j in range(b+1)]
# for i in total:
#    x, y = i
#    m[y][x] = "#"
#
# for i in m:
#    print("".join(i))
